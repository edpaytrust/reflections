
What happens when you initialize a repository? Why do you need to do it?

	A hidden directory '.git' is created to store all of the metadata and
	manage the versioning. This givs yo a 'place' to commit to and begin
	tracking changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Gives a temp place to prepare commits, allows a 'package' of logical changes
	to be assembled and reviewed before puttign into the repository, commits can 
	be managed separatly from the full contents of the working directory.

How can you use the staging area to make sure you have one commit per logical
change?

	Only add the files to the staging area that are part of the unit of work, not
	all of the working files. Files can be staged in several iterations to clean 
	up the working directory.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches help when you want to work on separate distinct versions of the code
	set. Experimental changes to potentilay be discarded, or a more permanent version
	like a language localization are two examples. You can segagrate changes for
	eventual merging, or maintain separate lines with shared logic in parpituity.

How do the diagrams help you visualize the branch structure?

	The diagrams help show the tracability back to where a branch occured, the 
	changes on the branches, and how many related branches are in the repository

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The changes from each branch are combined into a unified version. The diagram
	lets you see the series of changes on the branch, the log co-mingles based
	on timestamp.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually? 